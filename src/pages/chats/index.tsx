import Head from 'next/head';
import styles from './home.module.scss';
import ChatCard from '@/components/ChatCard';
import { useSelector } from 'react-redux';
import { RootState } from '@/redux/store';
import Image from 'next/image';
import noMassgeVector from '../../../assets/vectors/undraw_begin_chat_re_v0lw.svg';
import { Box, Text } from '@chakra-ui/react';
import BottomBar from '@/components/BottomBar';
import { ChangeEvent, useEffect } from 'react';
import { getUserChats } from '@/apis/chats.api';
import { useDispatch } from 'react-redux';
import { setCurrentRoute } from '@/redux/system.slice';
import React from 'react';
import { AnyAction } from '@reduxjs/toolkit';
import useTranslation from 'next-translate/useTranslation';
import SearchInput from '@/components/SearchInput/SearchInput';
import { clearChatMessages, searchForChat, setOpenedChat } from '@/redux/chats.slice';

export default function Home() {
  // translations
  const { t } = useTranslation('chatsPage');
  // screens names
  const { t: routesNamesTra } = useTranslation('routesNames');
  // redux stroe dispatch fun
  const dispatch = useDispatch();
  // get user chats
  const { chats, chatMessages, openedChat } = useSelector((state: RootState) => state.chat);
  // handleFormChange
  const handleFormChange = (e: ChangeEvent<HTMLInputElement>) => dispatch(searchForChat(e.target.value));
  // component did mount hook
  useEffect(() => {
    // set current screen name
    dispatch(setCurrentRoute(routesNamesTra('chats')));
    // reset opendChat if it exist
    if (openedChat) dispatch(setOpenedChat(undefined));
    // terminate and do not get chats if there're exist
    if (chats) return;
    // get loggedIn Usr Access token
    const userToken = localStorage.getItem('access_token');
    // get usr chat if ther're not exist
    dispatch(getUserChats(userToken) as unknown as AnyAction);
  }, []);
  // check for chat messages
  useEffect(() => {
    // clear chat message if they exist
    if (chatMessages?.length) dispatch(clearChatMessages());
  }, [chatMessages]);
  return (
    <>
      <Head>
        <title>SamChat</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div className={styles.chats}>
        <SearchInput data={{ loadingState: false, handleFormChange }} />
        {/* render chats */}
        <Box>
          {chats?.length === 0 ? (
            // no chats avatar
            <Box className={styles.imgContainer}>
              <Image src={noMassgeVector} alt='no chats' />
              <Text textColor={'gray'} fontSize={'1.5rem'}>
                {t('noChatText')}
              </Text>
            </Box>
          ) : (
            ''
          )}
          {chats?.length !== 0 ? chats?.map((chat) => <ChatCard key={chat._id} chat={chat} />) : ''}
        </Box>
        <BottomBar />
      </div>
    </>
  );
}
